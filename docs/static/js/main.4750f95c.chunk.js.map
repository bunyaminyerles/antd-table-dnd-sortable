{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","columns","key","dataIndex","title","width","render","MenuOutlined","dataSourceRaw","Array","fill","map","item","index","toString","useState","dataSource","setDataSource","activeId","setActiveId","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","collisionDetection","closestCenter","onDragStart","event","active","id","onDragEnd","over","items","oldIndex","findIndex","newIndex","arrayMove","components","body","wrapper","props","children","restProps","child","strategy","verticalListSortingStrategy","row","useSortable","attributes","listeners","setNodeRef","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qTAwIeA,MAnHf,WACE,IAAMC,EAAU,CACd,CACEC,IAAK,aACLC,UAAW,aACXC,MAAO,OACPC,MAAO,GACPC,OAAQ,kBAAM,cAACC,EAAA,EAAD,MAEhB,CACEL,IAAK,MACLC,UAAW,MACXC,MAAO,QAILI,EAAgB,IAAIC,MAAM,GAAGC,KAAK,IAAIC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAIhEX,IAAKW,EAAMC,eApBA,EAsBuBC,mBAASP,GAtBhC,mBAsBNQ,EAtBM,KAsBMC,EAtBN,OAwBmBF,mBAAS,MAxB5B,mBAwBNG,EAxBM,KAwBIC,EAxBJ,KA0BPC,EAAUC,YACdC,YAAUC,KACVD,YAAUE,IAAgB,CACxBC,iBAAkBC,OAuBtB,OACE,eAAC,IAAD,CACEN,QAASA,EACTO,mBAAoBC,IACpBC,YAvBJ,SAAyBC,GAAa,IAC5BC,EAAWD,EAAXC,OACRZ,EAAYY,EAAOC,KAsBjBC,UAnBJ,SAAuBH,GAAa,IAC1BC,EAAiBD,EAAjBC,OAAQG,EAASJ,EAATI,KACZH,EAAOC,KAAOE,EAAKF,IACrBf,GAAc,SAACkB,GAEb,IAAMC,EAAWD,EAAME,WAAU,SAACzB,GAAD,OAAUA,EAAKV,MAAQ6B,EAAOC,MACzDM,EAAWH,EAAME,WAAU,SAACzB,GAAD,OAAUA,EAAKV,MAAQgC,EAAKF,MAC7D,OAAOO,YAAUJ,EAAOC,EAAUE,MAItCnB,EAAY,OAIZ,UAME,cAAC,IAAD,CACElB,QAASA,EACTe,WAAYA,EACZwB,WAAY,CACVC,KAAM,CACJC,QAUV,SAA0BC,GAAa,IAC7BC,EAA2BD,EAA3BC,SAAaC,EADe,YACDF,EADC,cAEpC,OACE,cAAC,IAAD,yBAEER,MAAOS,EAAS,GAAGjC,KAAI,SAACmC,GAAD,OAAgBA,EAAM5C,OAC7C6C,SAAUC,KACNH,GAJN,aAME,iDAAWA,GAAX,aAGID,SArBAK,IA4BV,SAAsBN,GAAa,IAAD,EACcO,YAAY,CACxDlB,GAAIW,EAAM,kBADJQ,EADwB,EACxBA,WAAYC,EADY,EACZA,UAAWC,EADC,EACDA,WAGvBT,EAA2BD,EAA3BC,SAAaC,EAJW,YAIGF,EAJH,cAKhC,OACE,wDAAIW,IAAKD,GAAgBF,GAAgBN,GAAzC,aACGD,EAASjC,KAAI,SAACmC,GAC2BA,EAAhCF,SADqB,IACX1C,EAAsB4C,EAAtB5C,IAAQ2C,EADE,YACYC,EADZ,oBAE5B,MAAe,eAAR5C,EACL,0DAAQkD,GAAeP,GAAvB,aACGC,KAGH,8CAAQD,GAAR,aAAoBC,gBArC1B,cAAC,IAAD,UAAc5B,GAAsB,WC7E3BqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS1D,OACP,cAAC,IAAM2D,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4750f95c.chunk.js","sourcesContent":["import \"./App.css\";\nimport { Table } from \"antd\";\nimport { MenuOutlined } from \"@ant-design/icons\";\nimport {\n  closestCenter,\n  DndContext,\n  DragOverlay,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const columns = [\n    {\n      key: \"dragHandle\",\n      dataIndex: \"dragHandle\",\n      title: \"Drag\",\n      width: 30,\n      render: () => <MenuOutlined />,\n    },\n    {\n      key: \"key\",\n      dataIndex: \"key\",\n      title: \"Key\",\n    },\n  ];\n\n  const dataSourceRaw = new Array(5).fill({}).map((item, index) => ({\n    // This will be transformed into `data-row-key` of props.\n    // Shall be truthy to be draggable. I don't know why.\n    // To this end, index of number type is converted into string.\n    key: index.toString(),\n  }));\n  const [dataSource, setDataSource] = useState(dataSourceRaw);\n  // ID to render overlay.\n  const [activeId, setActiveId] = useState(null);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  function handleDragStart(event: any) {\n    const { active } = event;\n    setActiveId(active.id);\n  }\n\n  function handleDragEnd(event: any) {\n    const { active, over } = event;\n    if (active.id !== over.id) {\n      setDataSource((items) => {\n        // In this example, find an item, where `item.key` === `useSortable.id`.\n        const oldIndex = items.findIndex((item) => item.key === active.id);\n        const newIndex = items.findIndex((item) => item.key === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n    // Stop overlay.\n    setActiveId(null);\n  }\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n    >\n      <Table\n        columns={columns}\n        dataSource={dataSource}\n        components={{\n          body: {\n            wrapper: DraggableWrapper,\n            row: DraggableRow,\n          },\n        }}\n      />\n      {/* Render overlay component. */}\n      <DragOverlay>{activeId ? activeId : null}</DragOverlay>\n    </DndContext>\n  );\n\n  function DraggableWrapper(props: any) {\n    const { children, ...restProps } = props;\n    return (\n      <SortableContext\n        // `children[1]` is `dataSource`.\n        items={children[1].map((child: any) => child.key)}\n        strategy={verticalListSortingStrategy}\n        {...restProps}\n      >\n        <tbody {...restProps}>\n          {\n            // This invokes `Table.components.body.row` for each element of `children`.\n            children\n          }\n        </tbody>\n      </SortableContext>\n    );\n  }\n\n  function DraggableRow(props: any) {\n    const { attributes, listeners, setNodeRef } = useSortable({\n      id: props[\"data-row-key\"],\n    });\n    const { children, ...restProps } = props;\n    return (\n      <tr ref={setNodeRef} {...attributes} {...restProps}>\n        {children.map((child: any) => {\n          const { children, key, ...restProps } = child;\n          return key === \"dragHandle\" ? (\n            <td {...listeners} {...restProps}>\n              {child}\n            </td>\n          ) : (\n            <td {...restProps}>{child}</td>\n          );\n        })}\n      </tr>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}